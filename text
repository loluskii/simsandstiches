    public function flutterInit(Request $request)
    {
        // dd($request->meta);
        try {
            $data = [
                "payment_options" => 'card,banktransfer',
                "amount" => $request->amount,
                "email" => Auth::user()->email ?? $request->email,
                "tx_ref" => Flutterwave::generateReference(),
                "currency" => $request->currency,
                "redirect_url" => route('flutter.callback'),
                "meta" => ['data' => ['data' => 'data']],
                "customer" => [
                    "email" => Auth::user()->email ?? $request->email,
                    "name" => $request->name,
                ],
                "customizations" => [
                    "title" => 'Bibah Michael',
                    "description" => Carbon::now(),
                ],
            ];
            $payment = Flutterwave::initializePayment($data);
            // return $payment;
            if ($payment['status'] !== 'success') {
                // notify something went wrong
                return back()->with('error', 'Oops! Something went wrong.');
            }
            return redirect($payment['data']['link']);
        } catch (\Exception$th) {
            return $th->getMessage();
        }
    }

    public function flutterwaveCallback()
    {
        $currency = session('currency_code') ?? session('system_default_currency_info')->code;
        if (request()->status == "cancelled") {
            return redirect()->route("checkout.page-3", ['session', session()->get('session')])->with("error", "Transaction Cancelled");
        } else if (request()->status == "successful") {
            $transactionID = Flutterwave::getTransactionIDFromCallback();
            $data = Flutterwave::verifyTransaction($transactionID);
            $txn_ref = $data['data']['flw_ref'];
            $order = session()->get('order');
            $amount = $data['data']['amount'];
            $subamount = \Cart::session(Helper::getSessionID())->getSubTotal();
            $user_id = auth()->check() ? auth()->id() : rand(0000, 9999);
            $method = 'flutterwave';
            $currency = Currency::where('code', '=', $data['data']['currency'])->first();
            $cart = \Cart::session(Helper::getSessionID())->getContent();
            // store order
            $res = OrderActions::store($order, $amount, $subamount, $user_id, $method, $currency, $cart);
            $newOrder = OrderQueries::findByRef($res);

            DB::beginTransaction();
            if (Payment::where('payment_ref', $transactionID)->first()) {
                throw new Exception('Duplicate transaction');
            } else {
                $payment = new Payment();
                $payment->user_id = $newOrder->user_id;
                $payment->order_id = $newOrder->id;
                $payment->amount = $amount;
                $payment->currency = $newOrder->order_currency;
                $payment->description = 'Payment for Order ' . $newOrder->order_number;
                $payment->payment_ref = $txn_ref;
                $payment->save();
                DB::commit();

                $admin = User::where('is_admin', 1)->get();
                $user = $newOrder->shipping_email;

                \Cart::session(auth()->check() ? auth()->id() : 'guest')->clear();
                request()->session()->forget('order');
                request()->session()->forget('session');

                AdminOrderNotification::dispatch($newOrder, $admin);
                SendOrderInvoice::dispatch($newOrder, $user)->delay(now()->addMinutes(3));

                return redirect()->route('checkout.success', ['reference' => encrypt($newOrder->order_reference)]);
            }
        } else {
            abort(500);
        }
    }
